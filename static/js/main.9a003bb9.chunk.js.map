{"version":3,"sources":["utilities.js","App.js","index.js"],"names":["labelMap","1","name","color","2","3","4","5","drawRect","boxes","classes","scores","threshold","imgWidth","imgHeight","ctx","clearRect","i","length","y","x","height","width","text","strokeStyle","lineWidth","fillStyle","font","beginPath","fillText","toFixed","rect","stroke","App","webcamRef","useRef","canvasRef","runCoco","a","tf","net","detectLoop","detect","requestAnimationFrame","current","video","readyState","videoWidth","videoHeight","img","fromPixels","resized","resizeBilinear","casted","cast","expanded","expandDims","executeAsync","obj","console","array","log","getContext","useEffect","className","ref","muted","videoConstraints","facingMode","exact","style","position","marginLeft","marginRight","left","right","textAlign","zindex","zIndex","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9a003bb9.chunk.js","sourcesContent":["// // Define our labelmap\r\n// const labelMap = {\r\n//     1:{name:'TextCloth', color:'red'},\r\n//     2:{name:'SolidCloth', color:'yellow'},\r\n//     3:{name:'PatternCloth', color:'lime'},\r\n// }\r\n\r\n// // Define a drawing function\r\n// export const drawRect = (boxes, classes, scores, threshold, imgWidth, imgHeight, ctx)=>{\r\n//     for(let i=0; i<=boxes.length; i++){\r\n//         if(boxes[i] && classes[i] && scores[i]>threshold){\r\n//             // Extract variables\r\n//             const [y,x,height,width] = boxes[i]\r\n//             const text = classes[i]\r\n            \r\n//             // Set styling\r\n//             ctx.strokeStyle = labelMap[text]['color']\r\n//             ctx.lineWidth = 10\r\n//             ctx.fillStyle = 'white'\r\n//             ctx.font = '30px Arial'         \r\n            \r\n//             // DRAW!!\r\n//             ctx.beginPath()\r\n//             ctx.fillText(labelMap[text]['name'] + ' - ' + Math.round(scores[i]*100)/100, x*imgWidth, y*imgHeight-10)\r\n//             ctx.rect(x*imgWidth, y*imgHeight, width*imgWidth/2, height*imgHeight/2);\r\n//             ctx.stroke()\r\n//         }\r\n//     }\r\n// }\r\n\r\n// Define our labelmap\r\n\r\n\r\n\r\nconst labelMap = {\r\n    1: { name: 'Text', color: 'red' },\r\n    2: { name: 'Solid', color: 'yellow' },\r\n    3: { name: 'Pattern', color: 'purple' },\r\n    4: { name: 'PatternPants', color: 'blue' },\r\n    5: { name: 'SolidPants', color: 'lime' },\r\n};\r\n\r\n// Define a drawing function\r\nexport const drawRect = (boxes, classes, scores, threshold, imgWidth, imgHeight, ctx) => {\r\n    // Clear the canvas\r\n    ctx.clearRect(0, 0, imgWidth, imgHeight);\r\n\r\n    for (let i = 0; i < boxes.length; i++) {\r\n        if (boxes[i] && classes[i] && scores[i] > threshold) {\r\n            // Extract variables  \r\n            const [y, x, height, width] = boxes[i];\r\n            const text = classes[i];\r\n\r\n            // Set styling\r\n            ctx.strokeStyle = labelMap[text]['color'];\r\n            ctx.lineWidth = 2; // Adjusted for better visibility\r\n            ctx.fillStyle = 'white';\r\n            ctx.font = '18px Arial'; // Adjusted for better visibility\r\n\r\n            // DRAW!!\r\n            ctx.beginPath();\r\n            ctx.fillText(\r\n                `${labelMap[text]['name']} - ${(scores[i] * 100).toFixed(2)}%`,\r\n                x * imgWidth,\r\n                y * imgHeight - 10\r\n            );\r\n            ctx.rect(\r\n                x * imgWidth,\r\n                y * imgHeight,\r\n                (width - x) * imgWidth,\r\n                (height - y) * imgHeight\r\n            );\r\n            ctx.stroke();\r\n        }\r\n    }\r\n};","// Import dependencies\r\nimport React, { useRef, useState, useEffect } from \"react\";\r\nimport * as tf from \"@tensorflow/tfjs\";\r\nimport Webcam from \"react-webcam\";\r\nimport \"./App.css\";\r\nimport { nextFrame } from \"@tensorflow/tfjs\";\r\n// 2. TODO - Import drawing utility here\r\nimport {drawRect} from \"./utilities\"; \r\n\r\nfunction App() {\r\n  const webcamRef = useRef(null);\r\n  const canvasRef = useRef(null);\r\n\r\n  // Main function\r\n  const runCoco = async () => {\r\n    // 3. TODO - Load network \r\n    const net = await tf.loadGraphModel('https://nexrender-backend-9320740.s3.ap-south-1.amazonaws.com/ashzad/model.json')\r\n    \r\n    // Loop and detect hands\r\n  //   setInterval(() => {\r\n  //     detect(net);\r\n  //   }, 16.7);\r\n  // };\r\n    const detectLoop = () => {\r\n      detect(net);\r\n      requestAnimationFrame(detectLoop);\r\n    };\r\n   detectLoop();\r\n  };\r\n  const detect = async (net) => {\r\n    // Check data is available\r\n    if (\r\n      typeof webcamRef.current !== \"undefined\" &&\r\n      webcamRef.current !== null &&\r\n      webcamRef.current.video.readyState === 4\r\n    ) {\r\n      // Get Video Properties\r\n      const video = webcamRef.current.video;\r\n      const videoWidth = webcamRef.current.video.videoWidth;\r\n      const videoHeight = webcamRef.current.video.videoHeight;\r\n\r\n      // Set video width\r\n      webcamRef.current.video.width = videoWidth;\r\n      webcamRef.current.video.height = videoHeight;\r\n\r\n      // Set canvas height and width\r\n      canvasRef.current.width = videoWidth;\r\n      canvasRef.current.height = videoHeight;\r\n\r\n      // 4. TODO - Make Detections\r\n      const img = tf.browser.fromPixels(video)\r\n      const resized = tf.image.resizeBilinear(img, [640,480])\r\n      const casted = resized.cast('int32')\r\n      const expanded = casted.expandDims(0)\r\n      const obj = await net.executeAsync(expanded)\r\n      \r\n      // console.log(\"0: \", await obj[0].array())\r\n      // console.log(\"1: \", await obj[1].array())\r\n      // console.log(\"2: \",  await obj[2].array())\r\n      // console.log(\"3: \", await obj[3].array())\r\n      // console.log(\"4: \", await obj[4].array())\r\n      // console.log(\"5: \", await obj[5].array())\r\n      // console.log(\"6: \",  await obj[6].array())\r\n      console.log(await obj[0].array())\r\n      \r\n      const boxes = await obj[5].array()\r\n      const classes = await obj[1].array()\r\n      const scores = await obj[0].array()\r\n    \r\n      // Draw mesh\r\n      const ctx = canvasRef.current.getContext(\"2d\");\r\n\r\n      // 5. TODO - Update drawing utility\r\n      // drawSomething(obj, ctx)  \r\n      requestAnimationFrame(()=>{drawRect(boxes[0], classes[0], scores[0], 0.83, videoWidth, videoHeight, ctx)}); \r\n\r\n      tf.dispose(img)\r\n      tf.dispose(resized)\r\n      tf.dispose(casted)\r\n      tf.dispose(expanded)\r\n      tf.dispose(obj)\r\n\r\n    }\r\n  };\r\n\r\n  useEffect(()=>{runCoco()},[]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <Webcam\r\n          ref={webcamRef}\r\n          muted={true} \r\n          videoConstraints={{ facingMode: { exact: \"environment\" } }}\r\n          style={{\r\n            position: \"absolute\",\r\n            marginLeft: \"auto\",\r\n            marginRight: \"auto\",\r\n            left: 0,\r\n            right: 0,\r\n            textAlign: \"center\",\r\n            zindex: 9,\r\n            width: 640,\r\n            height: 640,\r\n          }}\r\n        />\r\n\r\n        <canvas\r\n          ref={canvasRef}\r\n          style={{\r\n            position: \"absolute\",\r\n            marginLeft: \"auto\",\r\n            marginRight: \"auto\",\r\n            left: 0,\r\n            right: 0,\r\n            textAlign: \"center\",\r\n            zIndex: 8,\r\n            width: 640,\r\n            height: 640,\r\n          }}\r\n        />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}